#! /bin/bash

function compute_swap () {
  # swap fixed to installed RAM, but must be shrunk if RAM > .25*hdsize
  # measure in bytes!

  typeset -i memsize mem_mib disk_eighth $2

  set `grep MemTotal /proc/meminfo`
  # Convert size to 1MiB blocks
  case $3 in
    kB) memsize=$2/1024;;
    MB) memsize=$2;;
    GB) memsize=$2*1024;;
    TB) memsize=$2*1024**2;;
    *) memsize=$2/1024;;      # Assume it is kB
  esac

  # If memory is > 1/8 of the disk, crowbar swap to 1/8 of the disk
  disk_eighth=remainder/8
  if [ $memsize -lt $disk_eighth ]; then
    # Base swap on memory size
    swapMiB=memsize
    swapsize=swapMiB
  else
    # Base swap on 1/8 disk size
    swapMiB=disk_eighth
    swapsize=swapMiB
  fi
}

function tidyBackupDir () {
  restoreType=$1

  # Get the name of the restore medium
  restoreIsLink=`/usr/lib/klibc/bin/readlink /restore`
  OIFS=$IFS; IFS=","
  set `grep "${rd_id[$rd]}" /harddisk/var/smoothwall/backup/config || echo "${rd_id[$rd]}"`
  IFS=$OIFS
  mediumName=$1
  # Set flag and history
  restoreDate=`chroot /harddisk date "+%Y-%m-%d; %H:%M:%S"`
  echo "Last restore: AUTO; date=$restoreDate; type=$restoreType; medium=$mediumName" > /harddisk/var/smoothwall/backup/flag
  cat /harddisk/var/smoothwall/backup/flag >> /harddisk/var/smoothwall/backup/history
  # Clear tmp files/dirs
  (
    cd /harddisk/var/smoothwall/backup
    rm -rf `ls -C1 | egrep -v "config|docs|flag|history|settings"` backup.flag
  )
}

# sed changes this to the currently used kernel version
#
KERNEL_VER=KeRnElVeRsIoN
KERNEL_TYPE=KeRnElTyPe

# set ATIME first thing
  case $noatime in
    1) ATIME="";;
    2) ATIME=",noatime";;
    *) ATIME="";;
  esac

CONFIG_ROOT=/var/smoothwall

BACKTITLE="Smoothwall PRODUCT_NAME PRODUCT_VERSIONPRODUCT_EXTRA (mARCH) -- http://smoothwall.org"
TITLE="${CLS}${BOUL}$BACKTITLE${NO}"

echo -e "$TITLE"
echo
echo "Tweaking udev"
echo "Tweaking udev" >/dev/tty2
  echo "  Rules"
  (
    echo "# Smoothwall Express persistent device names"
    echo
    echo "# Auto-generated by installation program: `date`"
    
    echo "    /dev/harddisk's name" >/dev/tty
    echo "# hard drive's symlink"
    echo "SUBSYSTEM==\"block\",KERNEL==\"[hs]d*|cciss*\",ENV{DEVTYPE}==\"disk\",ENV{ID_SERIAL_SHORT}==\"${hd_id[$hd]}\", SYMLINK+=\"harddisk\""
    echo "SUBSYSTEM==\"block\",KERNEL==\"[hs]d*|cciss*\",ENV{DEVTYPE}==\"partition\",ENV{ID_SERIAL_SHORT}==\"${hd_id[$hd]}\", SYMLINK+=\"harddisk%n\""
    echo "SUBSYSTEM==\"block\",KERNEL==\"vd*\",ENV{DEVTYPE}==\"disk\",ENV{ID_SERIAL}==\"${hd_id[$hd]}\", SYMLINK+=\"harddisk\""
    echo "SUBSYSTEM==\"block\",KERNEL==\"vd*\",ENV{DEVTYPE}==\"partition\",ENV{ID_SERIAL}==\"${hd_id[$hd]}\", SYMLINK+=\"harddisk%n\""
    echo "SUBSYSTEM==\"block\",ENV{ID_BUS}==\"scsi\",KERNEL==\"sd*\",ENV{DEVTYPE}==\"disk\",ENV{ID_SERIAL_SHORT}==\"\",ENV{ID_SCSI}==\"${hd_id[$hd]}\", SYMLINK+=\"harddisk\""
    echo "SUBSYSTEM==\"block\",ENV{ID_BUS}==\"scsi\",KERNEL==\"sd*\",ENV{DEVTYPE}==\"partition\",ENV{ID_SERIAL_SHORT}==\"\",ENV{ID_SCSI}==\"${hd_id[$hd]}\", SYMLINK+=\"harddisk%n\""
    echo
    
  ) > /etc/udev/rules.d/70-Smoothwall-custom-disk.rules

  if [ 1 -lt 0 ]; then
  echo "    Persistent custom NIC names"
  (
    echo "# Smoothwall Express persistent custom NIC names"
    echo
    echo "# Auto-generated by installation program: `date`"
    
    echo "# Persistent NIC names"
    # not doing custom NIC names for now
    #
    typeset -i i
    i=1
    while [ $i -lt $nic_cnt ]; do
      if [ "${CLR[$i]}" != "not named" ]; then
        echo -n "SUBSYSTEM==\"net\", ACTION==\"add\", DRIVERS==\"?*\","
        echo -n " ATTR{address}==\"`cat /sys/class/net/${DEV[$i]}/address`\","
        echo " ATTR{type}==\"1\", KERNEL==\"eth*\", NAME=\"${CLR[$i]}\""
      fi
      i=i+1
    done
  ) > /etc/udev/rules.d/70-Smoothwall-custom-NIC.rules
  fi # skip NIC names
  mv /etc/udev/rules.d/70-persistent-net.rules /etc/udev/rules.d/70-Smoothwall-custom-NIC.rules

  echo "  Triggering udev and waiting for it to settle"
  do_or_die "/sbin/udevadm trigger --subsystem-match=net"
  do_or_die "/sbin/udevadm trigger --subsystem-match=block"
  do_or_die "/sbin/udevadm settle"

  sleep 2


echo -e "$TITLE"
echo
echo "Partitioning hard drive"
echo "Partitioning hard drive" >/dev/tty2
echo
  typeset -i remainder bootsize swapsize rootsize logsize memsize
  typeset -i grubMiB bootMiB swapMiB rootMiB logMiB
  typeset -i grubstart bootstart swapstart rootstart logstart
  typeset -i grubend bootend swapend rootend logend
  typeset -i sTotal hw_sector_size unused unusedMiB

  # Get disk parameters
  hdd="${hd_dev[$hd]}"
  hw_sector_size=`cat /sys/block/$hdd/queue/hw_sector_size 2>/dev/null`
  if [ "$hw_sector_size" -eq 0 ]; then hw_sector_size=512; fi
  sTotal=`cat /sys/block/$hdd/size`
  sTotal=sTotal*$hw_sector_size/1024**2

  # Find out how much we're to use: all or part
  if [ $maxMiB -eq 0 ]; then
    remainder=$sTotal
    unused=0
  else
    remainder=$maxMiB
    unused=sTotal-remainder
  fi

  # Compute partition sizes
  #
  # boot partition fixed size
  bootMiB=200
  bootsize=bootMiB                   # 200MiB
  bootstart=3                        # 3 MiB
  bootend=bootstart+bootsize-1
  echo "  ${hdd}1  ${bootMiB}MiB -> /boot"

  # swap partition fixed size
  remainder=remainder-4            # less one MiB at each end, less 2MiB bios_grub
  compute_swap                     # swapsize is based on memory vs. disk size
  swapstart=bootend+1
  swapend=swapstart+swapsize-1
  echo "  ${hdd}2  ${swapMiB}MiB -> swap"

  # Conditional /var/log sizing
  remainder=remainder-bootsize-swapsize
  case $partSplit in
    1)
      # Traditional 2/3-1/3 split
      # log partition: 1/3 remainder
      logMiB=remainder/3
      # crowbar the log partition to 20MiB-20000MiB
      if [ $logMiB -lt 20 ]; then
        logMiB=20
      elif [ $logMiB -gt 20000 ]; then
        logMiB=20000
      fi
      logsize=logMiB
      logstart=swapend+1
      logend=logstart+logsize-1
      echo "  ${hdd}3  ${logMiB}MiB -> /log"
      ;;
    2)
      # Maximize /var/log
      logMiB=remainder-1024
      logsize=logMiB
      logstart=swapend+1
      logend=logstart+logsize-1
      echo "  ${hdd}3  ${logMiB}MiB -> /log"
      ;;
    3)
      # Minimize /var/log (1024miB)
      logMiB=1024
      logsize=logMiB
      logstart=swapend+1
      logend=logstart+logsize-1
      echo "  ${hdd}3  ${logMiB}MiB -> /log"

      # Maximize / (root)
      ;;
  esac

  # root partition: remainder
  remainder=remainder-logsize
  rootMiB=remainder
  rootsize=rootMiB
  rootstart=logend+1
  rootend=rootstart+rootsize-1
  echo "  ${hdd}4  ${rootMiB}MiB -> / (root)"

  # grub_bios partition: before /boot
  grubMiB=2
  grubsize=grubMiB
  grubstart=1
  grubend=grubstart+grubsize-1
  echo "  ${hdd}5  ${grubMiB}MiB -> grub_bios"

  # all that's left
  remainder=remainder-rootsize
  unused=unused+remainder
  unusedMiB=unused
  echo "           ${unusedMiB}MiB -> (free space)"

  # prep the input
  cat <<END >/tmp/partitions
unit MiB
select /dev/$hdd
mklabel gpt
mkpart boot reiserfs $bootstart $bootend
name 1 "/boot"
mkpart swap linux-swap $swapstart $swapend
name 2 swap
mkpart log reiserfs $logstart $logend
name 3 "/var/log"
mkpart root reiserfs $rootstart $rootend
name 4 "/"
mkpart bios_grub $grubstart $grubend
set 5 bios_grub on
name 5 "bios_grub"
print
quit
END

  echo
  # First tell udev to remove any existing partition nodes in /dev.
  do_or_die "dd if=/dev/zero of=/dev/$hdd bs=512 count=34"
  (head -3 /tmp/partitions; echo "quit") > /tmp/clear-partitions
  do_or_die "parted /dev/$hdd </tmp/clear-partitions"
  sleep 1
  # Now make the partitions
  do_or_die "dd if=/dev/zero of=/dev/$hdd bs=512 count=34"
  do_or_die "parted /dev/$hdd </tmp/partitions"

  sleep 2

echo -e "$TITLE"
echo
echo "Preparing filesystems"
echo "Preparing filesystems" >/dev/tty2
echo
  if [ $filesys -eq 1 ]; then MKFS="mke2fs -FFj"; else MKFS="mkreiserfs -ff"; fi
  echo "  /boot"
  do_or_die "$MKFS /dev/harddisk1"
  echo "  swap"
  do_or_die "mkswap /dev/harddisk2"
  echo "  /var/log"
  do_or_die "$MKFS /dev/harddisk3"
  echo "  /"
  do_or_die "$MKFS /dev/harddisk4"

  echo
  echo "Enabling swap"
  do_or_die "swapon /dev/harddisk2"


# If installing with or without a var data restore, mount the source medium
if [ $restore -eq 1 -o $restore -eq 2 ]; then
  # Confuser: First try to mount the whole medium as an ISO9660 CD-/DVD-ROM;
  # failing that, try mounting it as type 'isofs'. Failing that, try mounting
  # partition #1 as any known FS.
  echo "Mounting source medium"
  CDMNTLOG="/cdmount.log"
  > $CDMNTLOG
  mount -t iso9660  /dev/${cd_dev[$CD]}  /cdrom -o ro >> $CDMNTLOG 2>&1 \
  || mount -t isofs /dev/${cd_dev[$CD]}  /cdrom -o ro >> $CDMNTLOG 2>&1 \
  || mount /dev/${cd_dev[$CD]}1 /cdrom -o rw >> $CDMNTLOG 2>&1
  if [ $? -ne 0 ]; then
    echo "Couldn't mount source medium:"
    sed -e 's/^/  /' $CDMNTLOG
    echo
    echo "Press <ENTER> to reboot the system and try again."
    read a
    reboot -f
  fi
fi

# Mount the restore drive if restoring anything
if [ $restore -eq 2 -o $restore -eq 3 ]; then
  rm -rf /restore
  if grep "${rd_dev[$rd]}" /proc/mounts >/dev/null 2>&1; then
    echo "Linking cdrom to restore"
    # backups are on the source medium
    ln -s /cdrom /restore
  else
    echo "Mounting restore drive"
    mkdir -p /restore
    RDMNTLOG="/tmp/rdmount.log"
    > $RDMNTLOG
    mount /dev/${rd_dev[$rd]}1  /restore -o ro >> $RDMNTLOG 2>&1
    if [ $? -ne 0 ]; then
      echo "Couldn't mount restore drive:"
      sed -e 's/^/  /' $RDMNTLOG
      echo
      echo "Press <ENTER> to reboot the system and try again."
      read a
      reboot -f
    fi
  fi
fi

  if [ $filesys -eq 1 ]; then FS="-t ext4"; else FS="-t reiserfs"; fi
  echo "Mounting new root filesystem"
  do_or_die "mount $FS /dev/harddisk4 /harddisk"

  echo "Mounting /boot and /var/log"
  mkdir -p -m 755 /harddisk/boot /harddisk/var/log
  do_or_die "mount $FS /dev/harddisk1 /harddisk/boot"
  do_or_die "mount $FS /dev/harddisk3 /harddisk/var/log"

  sleep 2

echo -e "$TITLE"
echo
echo "Preparing Smoothwall"
echo "Preparing Smoothwall" >/dev/tty2
echo

GRUB_CMD="/usr/sbin/grub-install"

# If installing or restoring var data
if [ $restore -eq 1 -o $restore -eq 2 ]; then
  echo "  unpacking system"
  do_or_die "tar -C /harddisk -zxvf /cdrom/smoothwall.tgz"

  if [ $dev -eq 2 ]; then
    echo "    build tools"
    do_or_die "/bin/tar -C /harddisk -zxvf /cdrom/smoothdev.tgz"
    echo "    build docs & headers"
    do_or_die "/bin/tar -C /harddisk -zxvf /cdrom/smoothdoc.tgz"
  fi

  echo "  copying udev rules to target"
    do_or_die "mkdir -p -m 755 /harddisk/etc/udev/rules.d"
    do_or_die "cp -v /etc/udev/rules.d/*Smoothwall* /harddisk/etc/udev/rules.d/"

  echo "  creating new fstab, modules and mtab"
  set -- $FS

  echo >/dev/tty2
  OPTION="defaults$ATIME"
  FSTYPE=$2
  if [ "$FSTYPE" == "reiserfs" ]; then
    ROOTOPTION="notail$ATIME    "
  else
    ROOTOPTION=$OPTION
  fi
  (
    echo "proc            /proc           proc            defaults        0       0"
    echo "sys             /sys            sysfs           defaults        0       0"
    echo "dev             /dev            devtmpfs        defaults        0       0"
    echo "devpts          /dev/pts        devpts          defaults        0       0"
    echo "/dev/harddisk2  none            swap            sw              0       0"
    echo
    echo "/dev/harddisk4  /               $FSTYPE         $ROOTOPTION           0       1"
    echo "/dev/harddisk1  /boot           $FSTYPE         $OPTION  0       2"
    echo "/dev/harddisk3  /var/log        $FSTYPE         $OPTION  0       2"
  ) >/harddisk/etc/fstab
  echo "$FTYPE" >/harddisk/etc/modules

  do_or_die ">/harddisk/etc/mtab; chmod 644 /harddisk/etc/mtab"
  do_or_die "/bin/chroot /harddisk /bin/mount -f /proc"
  do_or_die "/bin/chroot /harddisk /bin/mount -f /sys"
  do_or_die "/bin/chroot /harddisk /bin/mount -f /dev"
  do_or_die "/bin/chroot /harddisk /bin/mount -a -f"
  
  echo "  saving configs and settings"
  cat <<END > /harddisk/$CONFIG_ROOT/main/hwprofile
STORAGE_DEVNODE=harddisk
CDROM_DEVNODE=${cd_dev[$CD]}
FS=$FSTYPE
END

  uname -r >/harddisk/$CONFIG_ROOT/main/kernel

  cat <<END >/harddisk/$CONFIG_ROOT/main/settings
LANGUAGE=en
HOSTNAME=smoothwall
KEYMAP=/usr/share/keymaps/i386/qwerty/uk.map.gz
OPENNESS=halfopen
END
  chown nobody:nobody /harddisk/$CONFIG_ROOT/main/settings
  chmod 664 /harddisk/$CONFIG_ROOT/main/settings

  cat <<END >/harddisk/$CONFIG_ROOT/time/settings
TIMEZONE=UTC
END

  if grep ${cd_dev[$CD]} /tmp/hd.list >/dev/null 2>&1; then
    # Installing from USB flash or other 'hard drive' (*not* a CD)?
    #   Assume this same device will be used for PnP backups.
    #   Write both 'settings' and 'config'
    (
      BACK_SETTINGS=/harddisk/$CONFIG_ROOT/backup/settings
      BACK_CONFIG=/harddisk/$CONFIG_ROOT/backup/config
      eval `/sbin/udevadm info --path=/sys/block/${cd_dev[$CD]} --query=all \
        | egrep "ID_BUS=|ID_SERIAL=" | sed -e 's/^E: //'`
      . ${BACK_SETTINGS}
      VARTOTAL['install']="$ID_BUS-$ID_SERIAL"
      echo "install,$ID_BUS-$ID_SERIAL" > $BACK_CONFIG
      chroot /harddisk /usr/bin/smoothwall/backup_sys -S
    )
  fi

  echo "  prepping module dependencies"
  do_or_die "/bin/chroot /harddisk /sbin/depmod -a"

  if [ $serialport -eq 2 -o $serialport -eq 3 ]; then
    echo "  enabling getty on ttyS0"
    sed -i -e '/^S0/ s/off/respawn/' -e '/^S0/ s/115200/'$BAUD'/' /harddisk/etc/inittab
  fi

  echo "  adjusting runtime initramfs"
  set -- $FS
  FSTYPE=$2
  if [ "$FSTYPE" == "reiserfs" ]; then
    OPTION="notail$ATIME        "
  else
    OPTION="defaults$ATIME"
  fi

  OPWD=`pwd`
  HDTMP="/harddisk/runtimeroot"
  mkdir -p $HDTMP; cd $HDTMP
  echo "    unpack"
  do_or_die "gunzip -c /harddisk/boot/initrd-${KERNEL_VER}${KERNEL_TYPE}.gz | cpio -id"
  echo "    update"
  do_or_die "mkdir -p -m 755 ${HDTMP}/etc/udev/rules.d"
  do_or_die "cp -v /etc/udev/rules.d/*Smoothwall* ${HDTMP}/etc/udev/rules.d/"

  (
    echo "/dev/harddisk4	/harddisk	$FSTYPE	$OPTION		0	1"
  ) >${HDTMP}/etc/fstab
  echo "$FSTYPE" >${HDTMP}/etc/modules
  do_or_die "/bin/chroot ${HDTMP} /sbin/depmod -a"

  echo "    re-pack"
  do_or_die "cd ${HDTMP}; find . | /bin/cpio -o -H newc | /usr/bin/gzip > /harddisk/boot/initrd-${KERNEL_VER}${KERNEL_TYPE}.gz"
  do_or_die "chmod 444 /harddisk/boot/initrd-${KERNEL_VER}${KERNEL_TYPE}.gz"
  cd ${OPWD}
  rm -rf ${HDTMP}

  echo "  configuring boot loader"
  cp /cdrom/boot/grub/express_boot_protect.xpm.gz /harddisk/boot/grub/
  cat > /harddisk/boot/grub/grub.conf <<END
# Begin /boot/grub/grub.conf

# Set up to output to both VGA console and serial port; grub'll
#   use the first one to see a keypress. Or it'll time out and
#   use the default from installation (the first one in the command).
#   Change the order of them if you manually change between serial
#   and vesa.

serial --unit=0 --speed=$BAUD
END

  if [ $serialport -eq 1 -o $serialport -eq 3 ]; then
    cat >> /harddisk/boot/grub/grub.conf <<END
terminal --timeout=5 serial console

# Boot using serial console by default
default 1
END
  else
    cat >> /harddisk/boot/grub/grub.conf <<END
terminal --timeout=5 console serial

# Boot using VESA console
default 0
END
  fi

  cat >> /harddisk/boot/grub/grub.conf <<END

# Allow 5 seconds before booting the default.
timeout 5

# Official backdrop
splashimage=/grub/express_boot_protect.xpm.gz
foreground=cfcfcf
background=222222

# Boot using VESA console
title Smoothwall Express (VESA Console)
root (hd0,0)
kernel /vmlinuz-${KERNEL_VER}${KERNEL_TYPE} root=/dev/harddisk4 ro quiet
initrd /initrd-${KERNEL_VER}${KERNEL_TYPE}.gz

# Boot using serial console
title Smoothwall Express (Serial Console)
root (hd0,0)
kernel /vmlinuz-${KERNEL_VER}${KERNEL_TYPE} root=/dev/harddisk4 ro quiet console=ttyS0,$BAUD
initrd /initrd-${KERNEL_VER}${KERNEL_TYPE}.gz

# Try to boot VESA console using kernel params to work around odd hardware/firmware
title Smoothwall Express (VESA Console, Odd Hardware)
root (hd0,0)
kernel /vmlinuz-${KERNEL_VER}${KERNEL_TYPE} root=/dev/harddisk4 ro quiet iommu=soft nomodeset
initrd /initrd-${KERNEL_VER}${KERNEL_TYPE}.gz

# Try to boot serial console using kernel params to work around odd hardware/firmware
title Smoothwall Express (Serial Console, Odd Hardware)
root (hd0,0)
kernel /vmlinuz-${KERNEL_VER}${KERNEL_TYPE} root=/dev/harddisk4 ro quiet console=ttyS0,$BAUD iommu=soft
initrd /initrd-${KERNEL_VER}${KERNEL_TYPE}.gz
END

  # Restore variable data if selected. AND upgrade files as needed!
  if [ $restore -eq 2 ]; then
    # Save the fresh files
    (
      cd /harddisk/etc
      for file in passwd group shadow snort.conf; do
        # Copy these; UNIX don't like not having them
        cp $file $file-FRESH
      done
    )
    (
      cd /harddisk/etc/udev/rules.d
      mv 70-Smoothwall-custom-disk.rules 70-Smoothwall-custom-disk.rules-FRESH
      mv 70-Smoothwall-custom-NIC.rules 70-Smoothwall-custom-NIC.rules-FRESH
    )
    (
      cd /harddisk/var/smoothwall/main;
      mv productdata productdata-FRESH
      mv settings settings-FRESH
    )
    (
      cd /harddisk/var/smoothwall/outgoing
      mv config config-FRESH
    )

    # Restore var data
    echo "  Restoring variable data from backup"
    do_or_die "tar -C /harddisk -zxvf /restore/${archive_id[$archive]}"

    tidyBackupDir var

    echo "  Upgrading variable data files"
    # upgrade main
    (
      cd /harddisk/var/smoothwall/main;
      cp productdata productdata-RESTORED
      cp productdata-FRESH productdata
      cp settings settings-RESTORED
      cp settings-FRESH settings
    )

    # Upgrade udev rules
    # We don't need to deal with initramfs, since it's all new. Just check if
    #   the NICs have changed.
    OPWD=${PWD}
    cd /harddisk/etc/udev/rules.d
    # If the MAC addrs changed, force setup to run
    grep SUBSYSTEM /etc/udev/rules.d/70-Smoothwall-custom-NIC.rules | \
        sed -e 's/.*address}=="//' -e 's/", ATTR{dev_id.*//' | \
        sort > /tmp/newNICs
    grep SUBSYSTEM /harddisk/etc/udev/rules.d/70-Smoothwall-custom-NIC.rules | \
        sed -e 's/.*address}=="//' -e 's/", ATTR{dev_id.*//' | \
        sort > /tmp/oldNICs
    if ! diff /tmp/newNICs /tmp/oldNICs >/dev/null 2>&1; then mustRunSetup=1; fi
    # And restore the new rules
    mv 70-Smoothwall-custom-disk.rules-FRESH 70-Smoothwall-custom-disk.rules
    mv 70-Smoothwall-custom-NIC.rules-FRESH 70-Smoothwall-custom-NIC.rules
    cd ${OPWD}

    # Upgrade /etc files (retain user modifications)
    (
      cd /harddisk/etc
      # Save the restored files
      for file in passwd group shadow snort.conf; do
        cp $file $file-RESTORED
      done

      # Upgrade them
      (
        egrep "fuse|plugdev|scanner|kvm|usbmux" group-FRESH
        egrep -v "fuse|plugdev|scanner|kvm|usbmux" group-RESTORED
      ) | sort -n -t: -k 3,3 >group
      (
        egrep "usbmux" passwd-FRESH
        egrep -v "usbmux" passwd-RESTORED
      ) | sort -n -t: -k 3,3 >passwd
      # DON'T sort shadow
      (
        egrep -v "usbmux" shadow-RESTORED
        egrep "usbmux" shadow-FRESH
      ) >shadow
      cp snort.conf-FRESH snort.conf
      echo "    /etc/snort.conf upgraded; the original has been saved to snort.conf-RESTORED."
      echo "    If you made any local changes, you must copy them to the new file."
      sleep 3
    )

    # Upgrade .../outgoing/config
    #(
    #  cd /harddisk/var/smoothwall/outgoing
    #  cp config config-RESTORED
    #  cp /etc/upgrade-outgoing.{pl,sh} /harddisk/tmp/

    #  # Run the update script; chroot to get perl
    #  chroot /harddisk bash /tmp/upgrade-outgoing.sh
    #)

    # Update .../main/settings
    (
      cd /harddisk/var/smoothwall/main
      . settings-RESTORED
      LANGUAGErestored=$LANGUAGE
      HOSTNAMErestored=$HOSTNAME
      KEYMAPrestored=$KEYMAP
      OPENNESSrestored=$OPENNESS
      . settings-FRESH
      cat<<END > settings
LANGUAGE=$LANGUAGErestored
HOSTNAME=$HOSTNAMErestored
KEYMAP=$KEYMAPrestored
OPENNESS=$OPENNESSrestored
END
      chown nobody:nobody /harddisk/$CONFIG_ROOT/main/settings
      chmod 664 /harddisk/$CONFIG_ROOT/main/settings
    )

    # Sweep the detritus under the rug
    (cd /harddisk/etc; rm -f {passwd,group,shadow}-{RESTORED,FRESH})
    (cd /harddisk/var/smoothwall/main; rm -f *-{RESTORED,FRESH})
    (cd /harddisk/var/smoothwall/outgoing; rm -f *-{RESTORED,FRESH})
    (cd /tmp/; rm -f upgrade-outgoing*)
    GRUB_CMD="$GRUB_CMD --recheck"
  fi

else

  # Performing a total restore
  echo "  Restoring complete system from backup"
  do_or_die "tar -C /harddisk -zxvf /restore/${archive_id[$archive]}"

  tidyBackupDir total

  # Adjust the initramfs as needed (different disk, NICs or FS, etc.)
  KERNEL_VER=`ls -C1 /harddisk/boot/initrd* | tail -1 | sed -e 's/.*initrd-//' -e 's/'${KERNEL_TYPE}'\.gz//'`
  echo "  adjusting runtime initramfs"
  set -- $FS
  FSTYPE=$2
  if [ "$FSTYPE" == "reiserfs" ]; then
    OPTION="notail$ATIME        "
  else
    OPTION="defaults$ATIME"
  fi

  OPWD=`pwd`
  HDTMP="/harddisk/runtimeroot"
  mkdir -p $HDTMP; cd $HDTMP
  echo "    unpack"
  do_or_die "gunzip -c /harddisk/boot/initrd-${KERNEL_VER}${KERNEL_TYPE}.gz | cpio -id"
  echo "    update"
  do_or_die "mkdir -p -m 755 ${HDTMP}/etc/udev/rules.d"
  do_or_die "cp -v /etc/udev/rules.d/*Smoothwall* ${HDTMP}/etc/udev/rules.d/"

  echo "/dev/harddisk4  /harddisk       $FSTYPE $OPTION         0       1" >${HDTMP}/etc/fstab
  echo "$FSTYPE" >${HDTMP}/etc/modules
  do_or_die "/bin/chroot ${HDTMP} /sbin/depmod -a"

  echo "    re-pack"
  do_or_die "cd ${HDTMP}; find . | /bin/cpio -o -H newc | /usr/bin/gzip > /harddisk/boot/initrd-${KERNEL_VER}${KERNEL_TYPE}.gz"
  do_or_die "chmod 444 /harddisk/boot/initrd-${KERNEL_VER}${KERNEL_TYPE}.gz"
  cd ${OPWD}
  rm -rf ${HDTMP}

  # Also update udev rules, fstab and modules on harddisk
  # And ensure setup is run if the NICs have changed
  grep SUBSYSTEM /etc/udev/rules.d/*Smoothwall*NIC* | \
      sed -e 's/.*address}=="//' -e 's/", ATTR{dev_id.*//' | \
      sort > /tmp/newNICs
  grep SUBSYSTEM /harddisk/etc/udev/rules.d/*Smoothwall*NIC* | \
      sed -e 's/.*address}=="//' -e 's/", ATTR{dev_id.*//' | \
      sort > /tmp/oldNICs
  if ! diff /tmp/newNICs /tmp/oldNICs >/dev/null 2>&1; then mustRunSetup=1; fi
  do_or_die "cp -v /etc/udev/rules.d/*Smoothwall* /harddisk/etc/udev/rules.d/"
  sed -i -e 's=/ .*=/               '$FSTYPE' '$OPTION'         0       1=' \
         -e 's=/boot.*=/boot           '$FSTYPE' defaults'$ATIME'         0       2=' \
         -e 's=/var/log.*=/var/log        '$FSTYPE' defaults'$ATIME'         0       2=' \
      /harddisk/etc/fstab
  sed -i -e 's/reiserfs\|ext./'$FSTYPE'/' /harddisk/etc/modules

  # Sweep some backup crumbs under the rug
  rm -f /harddisk/boot/grub/device.map  # map might've changed
  > /harddisk/etc/mtab                  # It's wrong anyway
  chroot /harddisk mount -f -a          # Make it match 'now'

  GRUB_CMD="$GRUB_CMD --recheck"
fi

# Always install the boot loader whether installing, restoring var or
#   doing a total restore
echo "  installing boot loader"
do_or_die "mount --rbind /proc /harddisk/proc"
do_or_die "mount --rbind /sys /harddisk/sys"
do_or_die "mount --rbind /dev /harddisk/dev"
cat<<END >/harddisk/tmp/grub.cmds
device (hd0) /dev/harddisk
root (hd0,0) 
setup (hd0) 
quit
END
do_or_die "/sbin/chroot /harddisk /usr/sbin/grub --batch </harddisk/tmp/grub.cmds"


sleep 2

echo -e "$TITLE"
echo
echo "Installation is complete."

sleep 2
